service:
  name: service-manager
  org: companyxz

# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ca-central-1'}
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  
  environment:
    
    SERVICE_TABLE: Services-${self:service.name}-${self:service.org}-${self:provider.stage}
    CUSTOMER_TABLE: Customer-${self:service.name}-${self:service.org}-${self:provider.stage}
    ATOMIC_TABLE: Atomic-${self:service.name}-${self:service.org}-${self:provider.stage}
    ATOMIC_ID: AtomicID-${self:service.org}-${self:provider.stage}
    SUB_INDEX: Index-${self:service.org}-${self:provider.stage}
    USER_POOL: Users-${self:service.org}-${self:provider.stage}
    REGION: ${self:provider.region}
    BUCKET: ${self:service.name}-${self:service.org}-${self:provider.stage}
    EXPIRES: 300


  
  iamRoleStatements:
    - Effect: Allow
      Action:
          - "xray:PutTraceSegments"
          - "xray:PutTelemetryRecords"
      Resource:
          - "*"
 

functions:

  CreateItem:
    handler: src/lambda/http/createitem.handler
    events:
      - http:
          method: post
          path: item
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    iamRoleStatementsInherit: true
    iamRoleStatementsName: ${self:service.name}-CreateItem-Role-${self:service.org}-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action: 
          - dynamodb:PutItem
        Resource:  arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CUSTOMER_TABLE}
      - Effect: Allow
        Action: 
          - dynamodb:PutItem
        Resource:  arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SERVICE_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:Query
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ATOMIC_TABLE}

    
  # CreateCustomer:
  #   handler: src/lambda/http/createCustomer.handler
  #   events:
  #     - http:
  #         method: post
  #         path: createcustomer
  #         cors: true
  #         authorizer:
  #           type: COGNITO_USER_POOLS
  #           authorizerId:
  #             Ref: ApiGatewayAuthorizer
  #   iamRoleStatementsInherit: true
  #   iamRoleStatementsName: ${self:service.name}-CreateCustomer-Role-${self:provider.stage}
  #   iamRoleStatements:
  #     - Effect: Allow
  #       Action: 
  #         - dynamodb:PutItem
  #       Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CUSTOMER_TABLE}
  
  # UpdateCustomer:
  #   handler: src/lambda/http/updateCustomer.handler
  #   events:
  #     - http:
  #         method: patch
  #         path: updatecustomer/{CustomerID}
  #         cors: true
  #         authorizer:
  #           type: COGNITO_USER_POOLS
  #           authorizerId:
  #             Ref: ApiGatewayAuthorizer 
  #   iamRoleStatementsInherit: true
  #   iamRoleStatementsName: ${self:service.name}-updatecustomer-Role-${self:provider.stage}
  #   iamRoleStatements:
  #     - Effect: Allow
  #       Action: 
  #         - dynamodb:UpdateItem
  #       Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CUSTOMER_TABLE}
  
  # AddUploadUrl:
  #   handler: src/lambda/http/adduploadurl.handler
  #   events:
  #     - http:
  #         method: post
  #         path: files/{table}/{ID}/attachment
  #         cors: true
  #         authorizer:
  #           type: COGNITO_USER_POOLS
  #           authorizerId:
  #             Ref: ApiGatewayAuthorizer 
  #   iamRoleStatementsInherit: true
  #   iamRoleStatementsName: ${self:service.name}-AddUploadUrl-Role-${self:provider.stage}
  #   iamRoleStatements:
  #     - Effect: Allow
  #       Action:
  #         - dynamodb:UpdateItem
  #       Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CUSTOMER_TABLE}
  #     - Effect: Allow
  #       Action:
  #           - dynamodb:UpdateItem
  #       Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SERVICE_TABLE}
  #     - Effect: Allow
  #       Action:
  #         - s3:PutObject
  #         - s3:GetObject
  #       Resource: arn:aws:s3:::${self:provider.environment.BUCKET}/*

  # GetCustomerbyID:
  #   handler: src/lambda/http/getCustomerbyID.handler
  #   events:
  #     - http:
  #         method: get
  #         path: getcustomerbyid/{CustomerID}
  #         cors: False
  #         authorizer:
  #           type: COGNITO_USER_POOLS
  #           authorizerId:
  #             Ref: ApiGatewayAuthorizer
  #   iamRoleStatementsInherit: true
  #   iamRoleStatementsName: ${self:service.name}-GetcustomerID-Role-${self:provider.stage}
  #   iamRoleStatements:
  #     - Effect: Allow
  #       Action: 
  #         - dynamodb:Query
  #       Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CUSTOMER_TABLE}
              
              
  # CreateService:
  #   handler: src/lambda/http/createService.handler
  #   events:
  #     - http:
  #         method: post
  #         path: createservice
  #         cors: true
  #         authorizer:
  #           type: COGNITO_USER_POOLS
  #           authorizerId:
  #             Ref: ApiGatewayAuthorizer
  #   iamRoleStatementsInherit: true
  #   iamRoleStatementsName: ${self:service.name}-CreateService-Role-${self:provider.stage}
  #   iamRoleStatements:
  #     - Effect: Allow
  #       Action:
  #         - dynamodb:PutItem
  #       Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SERVICE_TABLE} 
  #     - Effect: Allow
  #       Action:
  #         - dynamodb:PutItem
  #         - dynamodb:Query
  #         - dynamodb:UpdateItem
  #         - dynamodb:GetItem
  #       Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ATOMIC_TABLE}
  
  # AddComment:
  #   handler: src/lambda/http/addComment.handler
  #   events:
  #     - http:
  #         method: post
  #         path: addcomment/{serviceID}
  #         cors: true
  #         authorizer:
  #           type: COGNITO_USER_POOLS
  #           authorizerId:
  #             Ref: ApiGatewayAuthorizer
  #   iamRoleStatementsInherit: true
  #   iamRoleStatementsName: ${self:service.name}-addComment-Role-${self:provider.stage}
  #   iamRoleStatements:
  #     - Effect: Allow
  #       Action:
  #         - dynamodb:PutItem
  #         - dynamodb:UpdateItem
  #       Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SERVICE_TABLE} 


resources:
  Resources:
    ServiceManagertable:
      Type: AWS::DynamoDB::Table 
      Properties:
        AttributeDefinitions:
          - AttributeName: ServiceID
            AttributeType: S
          - AttributeName: CustomerID
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S  
        KeySchema:
          - AttributeName: ServiceID
            KeyType: HASH
          - AttributeName: CustomerID
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.SERVICE_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.SUB_INDEX}
            KeySchema:
              - AttributeName: CustomerID
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL 

    Customertable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: CustomerID
            AttributeType: S 
          - AttributeName: Name 
            AttributeType: S 
        KeySchema:
          - AttributeName: CustomerID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.CUSTOMER_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.SUB_INDEX}
            KeySchema:
              - AttributeName: Name
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    AtomicCounters:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: CompanyName
            AttributeType: S
        KeySchema:
          - AttributeName: CompanyName 
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.ATOMIC_TABLE}
    
    CognitoUserPool:
      Type: "AWS::Cognito::UserPool"
      Properties: 
        MfaConfiguration: OFF
        UserPoolName: ${self:provider.environment.USER_POOL}
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: False
            RequireNumbers: True
            RequireSymbols: False 
            RequireUppercase: True 
    
    CognitoUserPoolClient:
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: ${self:provider.environment.USER_POOL}
        GenerateSecret: False 
        UserPoolId:
          Ref: CognitoUserPool
    
    ApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [CognitoUserPool, Arn]    
    
    AttachementBucket:
      Type: AWS::S3::Bucket 
      Properties: 
        BucketName: ${self:provider.environment.BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET 
                - PUT 
                - POST 
                - DELETE 
                - HEAD 
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy 
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: "*"
              Action: "s3:GetObject"
              Resource: "arn:aws:s3:::${self:provider.environment.BUCKET}/*"
        Bucket: !Ref AttachementBucket


